{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Error.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Formulario","datosConsulta","useState","ciudad","pais","busqueda","guardarBusqueda","handleChange","e","target","name","value","onSubmit","preventDefault","type","id","onChange","htmlFor","Error","mensaje","Clima","resultado","console","log","main","parseInt","temp","temp_max","temp_min","App","componente","guardarCiudad","guardarPais","error","guardarError","guardarResultado","useEffect","a","url","fetch","respuesta","json","consultarAPI","datos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8b0adf34.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header ({titulo}) {\r\n   return( \r\n    <nav>\r\n        <div className=\"nav-wrapper light-blue darken-2\">\r\n            <a href=\"!#\" className=\"brand-logo\">{titulo}</a>\r\n        </div>\r\n    </nav>    \r\n\r\n   );\r\n}\r\n\r\nexport default Header;","import React, {useState} from 'react';\r\n\r\nfunction Formulario({datosConsulta}) {\r\n   \r\n    //state del componente\r\n    const [busqueda, guardarBusqueda] = useState({\r\n        ciudad: '',\r\n        pais: ''\r\n    })\r\n\r\n    const handleChange = e => {\r\n    // chambiar el state \r\n        guardarBusqueda({\r\n            ...busqueda, \r\n            [e.target.name] : e.target.value\r\n        });\r\n\r\n\r\n    }\r\n   \r\n    const consultarClima = e =>{\r\n\r\n        e.preventDefault();\r\n\r\n        //pasas hacia el componente principal la busqueda del usuario\r\n        datosConsulta(busqueda);\r\n           \r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <form\r\n            onSubmit={consultarClima}\r\n        >\r\n            <div className=\" input-field col s12\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"ciudad\"\r\n                    id=\"ciudad\"\r\n                    onChange={handleChange}\r\n                />\r\n                <label htmlFor=\"ciudad\">Ciudad: </label>\r\n             </div>\r\n             <div className=\"input-field col s12\">\r\n                 <select onChange={handleChange} name=\"pais\">\r\n                    <option value=\"\"> Selecciona un Pais</option>\r\n                    <option value=\"US\">Estados Unidos</option>\r\n                    <option value=\"MX\">Mexico</option>\r\n                    <option value=\"AR\">Argentina</option>\r\n                    <option value=\"CR\">Costa Rica</option>\r\n                    <option value=\"ES\">España</option>\r\n                    <option value=\"CL\">Chile</option>\r\n                    <option value=\"PE\">Perú</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"input-field col s12\">\r\n                <input type=\"submit\" className=\"waves-effect waves-light btn-large btn-block yellow accent-4\" value=\"Buscar Clima\"/>\r\n             </div>   \r\n         </form>   \r\n\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Formulario;\r\n\r\n","import React from 'react';\r\n\r\nfunction Error({mensaje}) {\r\n\r\n    return(\r\n        <div className=\"card-panel red darken-4 error col s12\">\r\n            {mensaje}\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Error;\r\n","import React from 'react';\r\n\r\nfunction Clima({resultado}) {\r\n    console.log(resultado);\r\n    //extraer valores\r\n    const {name, main} = resultado;\r\n\r\n    if(!name) return null;\r\n\r\n    //restar grados kelvin\r\n    const kelvin = 273.15;\r\n\r\n\r\n    return(\r\n        <div className=\"card-panel white col s12\">\r\n            <div className=\"black-text\"> \r\n            <h2> El  clima de {name} es:</h2>\r\n            <p className=\"temperatura\">\r\n                {parseInt(main.temp - kelvin, 10)} <span>&#x2103;</span>\r\n            </p>\r\n            <p>Temperatura Máxima: {parseInt(main.temp_max - kelvin, 10)} &#x2103;</p>\r\n            <p>Temperatura Mínima: {parseInt(main.temp_min - kelvin, 10)} &#x2103;</p>\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Clima;","import React, {useState, useEffect} from 'react';\nimport Header from './components/Header'\nimport Formulario from './components/Formulario';\nimport Error from './components/Error';\nimport Clima from './components/Clima';\n\n\nfunction App() {\n\n\n  //state principal \n  // ciudad =state, guardarCiudad = this.setState()\n  const [ciudad, guardarCiudad] = useState('');\n  const [pais, guardarPais] = useState('');\n  const  [error, guardarError] = useState(false);\n  const [resultado, guardarResultado] =  useState({});\n\n  useEffect(() =>{\n\n    //prevenir ejecución la primera vez\n    if(ciudad === '') return;\n\n\n    const consultarAPI = async() => {\n  \n      const appId='0100ece715668bd2c753a08410850c8c';\n      const url= ` https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n    \n  \n      //consultar la URL \n      const respuesta = await fetch(url);\n      const resultado = await respuesta.json();\n      \n    guardarResultado(resultado);\n   \n  }\n\n    consultarAPI();\n}, [ciudad, pais]);\n  \n\n\n const datosConsulta = datos => {\n  \n      //validar que ambos campos esten \n      if(datos.ciudad ==='' || datos.pais ===''){\n        guardarError(true);\n        return; \n      }\n      //ciudad y pais existen, agregarlos al state\n      guardarCiudad(datos.ciudad);\n      guardarPais(datos.pais);\n      guardarError(false);\n }\n \n\n  //cargar un componente condicionalmente\n  let componente;\n  if(error) {\n    //hay un error, mostrarlo\n    componente = <Error mensaje='Ambos campos son obligatorios'/>\n  } else {\n    //mostrar Clima\n    componente = <Clima\n                    resultado={resultado}\n                    />;\n\n  }\n\n  return (\n    <div className=\"App\">\n      <Header\n      titulo = 'Clima React App '\n      />\n\n\n\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col s12 m6\">\n              <Formulario\n                  datosConsulta={datosConsulta}\n              />\n              \n            </div>\n\n            <div className=\"col s12 m6\">\n                {componente}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}